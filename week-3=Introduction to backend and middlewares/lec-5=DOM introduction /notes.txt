In this lecture, we started off with the topic of DOM and learned a brief introduction of it.

Let us take the example of a television. In a television, if we want to change the channel, or increase the volume or do anything else, we interact with the television using the remote. Similarly JavaScript also has limited functionality when it comes to making websites dynamic and interactive which led to the introduction of Document Object Model or DOM.

DOM is the remote of our television known as browser and through DOM manipulation we can make websites interactive and dynamic and interact directly to browsers. DOM is not part of the ECMAscript documentation provided for the language of JavaScript but was developed later on and is separate and written by browser developers.

DOM (Document Object Model): DOM is indeed a representation of the structure of a document (commonly an HTML document) as a tree, where each node represents a part of the document, such as elements, attributes, and text. It provides a way for programs to interact with the structure, style, and content of web documents.

DOM as the Remote of Television: This analogy may cause confusion. While the DOM does allow manipulation of web content, likening it to a remote control for a television might not convey the full picture. A better analogy might be that the DOM is like a blueprint of a building, allowing you to interact with and modify its structure.

DOM and Web Browser Relationship: The DOM is indeed associated with web browsers, as it's through the browser that web content is rendered and where DOM manipulation occurs. However, the statement "DOM manipulation we can make websites interactive and dynamic and interact directly to browsers" is a bit vague. It's more accurate to say that DOM manipulation enables developers to modify the content, structure, and style of web pages dynamically, leading to interactive user experiences.

DOM and ECMAScript (JavaScript): ECMAScript is the standardized specification upon which JavaScript is based. DOM is not part of the ECMAScript standard; rather, it's a separate specification developed to provide a way for scripting languages like JavaScript to interact with web pages. While JavaScript is commonly used for DOM manipulation, other languages like Python and Ruby can also interact with the DOM through various methods.

Development of DOM: The DOM was indeed developed as part of web browser development efforts. It was standardized by the World Wide Web Consortium (W3C) to ensure consistency across browsers.

Through DOM we can do stuff like changing the colours of a button on mouse clicking or hovering over it, displaying text over image, displaying media or content on clicking keys on keyboard.

Now let us start with what is DOM?
DOM is a programming inerface for web documents. DOM is not a programmming language, but it rather represents the page so that programs cna change the document structure, style, and content. The DOM is a tree like representation of webpage that gets loaded into the browser.
DOM represents document as NODES AND OBJECTS.
Without it the JavaScript language wouldn't have any model or notion of web pages, HTML documents, SVG documents, and their component parts.
DOM can be understood as a web API used to build websites.

Another important point to know is that DOM is langauge independent.

Now how to access DOM?
When you create a script, where inline in a <script> element or included in the web page, you can immediately begin using API for the document or window objects to manipulate the document itself.

The DOM was designed to be independent of any particular programming langauge, making the structural representation of document available from a single, consistent API.

DOM represents the webpage using a series of objects. The main object is the document object, which in turn houses other objects which also house their own objects and so on.

When a web browser parses an HTML document, it builds a DOM tree and then uses it to display the document.

The document object is the top most object in DOM. It has properties and methods which you can use to get information about the document using a rule known as dot notation.