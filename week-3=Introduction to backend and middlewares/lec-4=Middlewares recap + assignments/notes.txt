In this lecture we are going to understand middlewares with a real world example.

Let us imagine a amusement park with a famous ride, there is a long queue of people waiting for their turn and a ticket checker who is checking everyone's tickets before allowing them access to the ride. If a person does not have a ticket or whose ticket is not valid, then he/she will get kicked out.

The ticket checker is a middleware, and even the amusement park is middleware.

This is only one aspect of middlewares, doing authentication of each user.

Below mentioned is the official documentation about definition of middlewares mentioned on express site.


Using middleware 
Express is a routing middleware web framework that has minimal functionality of its own , An Express application is essentially a series of middleware function calls.
Middleware functions are functions that have access to the request object ( req) , the response object ( res ) and the next which calls the next middleware function in the application request-response cycle. The next middleware function is commonly denoted by a variable named next.


Middleware functions can perform the following tasks:

Make changes to the request and the response objects.
End the request-response cycle.
Call the next middleware function in the stack 
If the correct middleware function does not end the request response cycle , it must call next() to pass control to the next middleware function.Otherwise the request will be left hanging.


An express Application can use the following types of middleware.

Application level middleware.
Router level middleware 
Error handling middleware 
Third party middleware 
You can load application and router-level middleware with an optional mount path. The function is executed every time the app receives a request.

const express=require('express');
const app=express();

app.use((req,res,next)=>{
    console.log('Time :' , Date.now());
    next();
})



This example shows a middleware function mounted on the 
/usr/:id path. The function is executed for any type of HTTP request on the /user/:id path.


app.use('/usr/:id',(req,res,next)=>{
     console.log("Request Type : ",req.method);
    next();
})



This example shows a route and its handler function (middleware system). The function handles GET requests to the /user/:id path.

app.get('/user/:id', (req, res, next) => {
  res.send('USER')
})


Here is an example of loading series of middleware function at a mount path . It illustrates a middleware sub-stack that prints request into for any type of HTTP request to the /user/:id path.

app.get('/user/:id',(req,res,next)=>{
    console.log("Request URL: "+req.orignalUrl);
    next();
},(req,res,next)=>{
    console.log("Request Type:" , req.method);
    next();
})

Route Handlers enable you to define multiple routes for a path. The example below defines two routes for GET requests to the /user/:id path. The second route will not cause any problem but it will never be called because the first route ents the request-response cycle.

This example shows a middleware sub-stack that handles get request to /user/:id path 


app.get('/user/:id',(req,res,next)=>{

    console.log(req.params.id);
    next();
},(req,res,next)=>{
    res.send("User Info");
})



// To skip the rest of middleware functions from a router middleware stack , call next('route') to pass control to the next route. Note next('route') will work only in middleware functions that were loaded by using app.METHOD() or router.METHOD() functions


app.get('/user/:id',(req,res,next)=>{

    // if the User ID is 0 , skip to the next route 


    if(req.params.id=="0") next('route')
    // otherwise pass the control to the next middleware function function in this stack 
    else 
    next()
},(req,res,next)=>{
    res.send('regular');
})


app.get('/user/:id',(req,res,next)=>{
    res.send("special");
});

app.use(function(err,req,res,next){
    console.log(err);

})


Middlewares can also be declared in an array of reusability 


This example shows an array with a middleware sub-stack that handles GET requests to the /user/:id path 

function logOrignalUrl(req,res,next){
    console.log("Request URL:"+ req.orignalUrl);
    next();
}

function logMethod(req,res,next){
    console.log("Request Type :", req.method);
    next();
}


const logStuff=[logOrignalUrl,logMethod]
app.get('/user/:id',logStuff,(req,res,next)=>{
    res.send("User Info");
})


// Router Level middleware 
// Router-Level middleware works in the same way as application level middleware , expect it is bound to an instance of express.Router().



const router=express.Router();
Load router-level middleware by using the router.use() and router.METHOD() functions.

The following example code replicates the middleware system that is shown above for application-level middleware, by using router-level middleware 

const express=require('express');
const app=express();
const router=express.Router();


// a middleware function with no mount path . This code is executed for every request to the router 

router.use((req,res,next)=>{
    console.log('Time:',Date.now());
    next();
})


// a middleware substack shows the request info for any type of HTTP request to the /user/:id path 



router.use('/user/:id',(req,res,next)=>{

    console.log("Request URL:",req.orignalURL);
    next();
},(req,res,next)=>{

    console.log('Request Type',req.method);
    next();
})


// a middleware sub-stack handles get requests to the  /user/:id path 


router.get('/user/:id',(req,res,next)=>{
      // if the user ID is 0, skip to the next router
  if (req.params.id === '0') next('route')
  // otherwise pass control to the next middleware function in this stack
  else next()
}, (req, res, next) => {
  // render a regular page
  res.render('regular')
})


// handler for the /user/:id path , which renders a special page 

router.get('/user/:id',(req,res,next)=>{
    console.log(req.params.id);
    res.render('special')
})


// mount the router on the app 
app.use('/',router)

To skip the rest of the router's middleware functions, call next('route') to pass control back to the router instance.

This example shows a middleware sub-stack that handles GET requests to the /user/:id path 

const express=require('express');
const app=express();
const router=express.Router();


// predicate the router with a check and bail out when needed 

router.use((req,res,next)=>{
    if(!req.headers['x-auth]) return next('router');
    next();
})

router.get('/user/:id',(req,res)=>{
    res.send('hello, user!');
})


// use the router and 401 anything falling through 
app.use('/admin',router,(req,res)=>{
    res.sendStatus(401)
})


Error Handling middleware 
(important )Error Handling middleware always takes four arguments. you must provide four arguments to identify it as an error-handling middleware function , even if you dont need to use the next object , you must specify it to maintain the signature. Otherwise the next object will be interpreted as regular middleware and will fail to handle errors.




Define error-handling middleware function in the same way as other middleware functions , except with four arguments instead of three . specially with the signature (err,req,res,next));

app.use((err,req,res,next)=>{
    console.log(err.stack);
    res.status(500).send("Something broke !");
})


For details about error-handling middleware , see : error Handling 


Built-in middleware 

Starting  from the version 4.x , Express no longer depends on Connect . The middleware functions that were previously included with express are now in seperate modules , see the list of middleware functions 

Express has the following built in middleware functions : 

express.static serves the assets such as HTML files , images and so on 
express.json parses the incoming requests with the JSON payloads. Note available with Express 4.16.0+
express.urlencoded parses incoming requests with URL-encoded payloads. Note available with express 4.16.0+
Third party middleware
Use the third party middleware to add functionality to Express apps.


Install the Node.js module for the required functionality , then load it in your app at the application level or at router level.

The following example illustrates installing and loading cookie parsing middleware function cookie-parser.


npm install cookie-parser 
const express=require('express')
const app=express()
const cookieParser=require('cookie-parser')

// load the cookie-parsing middleware 

app.use(cookieParser());

for a partial list of third -party middleware functions that are commonly used with express , see : Third-party middleware.


According to the express definition , express is very minimilistic , it is not supposed to be a framework as all it is just some middleware chained one after the other and according to above mentioned definition of express . even the amusement park is a middleware.
But we can consider amusement park as a route handler because it the last thing that we are visiting .

Through express , we can write cycle of request , every user going the cycle of request before giving access 

It is very convinient also because by writing so many middlewares we can write common ticket checker for all other ammusement park rides and not a seperate ticket-checker or a different middleware for each one 











